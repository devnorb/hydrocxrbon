/** Hydrocxrbon | discord account gen */
/** Don't know how to use? join https://dsc.gg/thegenhub */
// norb_ on top

const{openAIAccessToken:openAIAccessToken,logsWebhook:logsWebhook,authKey:authKey,discordServerURL:discordServerURL,tokenWebhook:tokenWebhook}=require("./config.json"),puppeteer=require("puppeteer-extra"),StealthPlugin=require("puppeteer-extra-plugin-stealth"),{uniqueNamesGenerator:uniqueNamesGenerator,adjectives:adjectives,colors:colors}=require("unique-names-generator"),{PuppeteerBlocker:PuppeteerBlocker}=require("@cliqz/adblocker-puppeteer"),wait=require("timers/promises").setTimeout,{EmbedBuilder:EmbedBuilder,WebhookClient:WebhookClient}=require("discord.js"),{ChatGPTAPI:ChatGPTAPI}=require("@devnorb/chatgpt"),webhook=new WebhookClient({url:logsWebhook}),tokenwebhook=new WebhookClient({url:tokenWebhook});async function checkENV(){if(!openAIAccessToken)throw webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:"[  Status -> **FAILURE** ] | No openAI access token was provided."}),await wait(500),Error("No openAI access token was provided.");if(!logsWebhook)throw webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:"[  Status -> **FAILURE** ] | No logs webhook URL was provided."}),await wait(500),Error("No webhook URL was provided.");if(!tokenWebhook)throw webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:"[  Status -> **FAILURE** ] | No token webhook URL was provided."}),await wait(500),Error("No webhook URL was provided.");if(!authKey)throw webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:"[  Status -> **FAILURE** ] | No auth key was provided."}),await wait(500),Error("No auth key was provided.");if("beta.release"!==authKey.toString())throw webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:"[  Status -> **FAILURE** ] | Incorrect auth key. Join dsc.gg/thegenhub and go to #key for the latest key."}),await wait(500),Error("Incorrect auth key. Join dsc.gg/thegenhub and go to #key for the latest key.")}async function startGenerator(){var e;await checkENV(),console.log("norb_ is cool"),console.log("hydrocxrbon account gen by norb_ | https://dsc.gg/thegenhub"),console.log("hydrocxrbon is in BETA TESTING! things may break and errors may occur."),webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:"```css\nHydrocxrbon account gen by norb_ [ norb_ on top ]\n```"}),await wait(500),webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:"[  Status -> **Info** ] | Checking for updates.."}),console.log("[  Status -> Info ] | Checking for updates..");let t=await fetch("https://raw.githubusercontent.com/devnorb/discordAccountGenerator/main/version");"v1-beta"!==(await t.text()).trim(0,-1).toString()?(webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:"[  Status -> **Update available** ] | A update is available for hydrocxrbon."}),console.log("[  Status -> Update available ] | A update is available for hydrocxrbon.")):(webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:"[  Status -> **Info** ] | Version up to date."}),console.log("[  Status -> Info ] | Version up to date.")),await wait(1e3),webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:"[  Status -> **Starting** ] | Starting hydrocxrbon account gen"}),console.log("[  Status -> Starting ] | Starting hydrocxrbon account gen"),await puppeteer.use(StealthPlugin());let o=await puppeteer.launch({headless:"new"}),a=await o.newPage(),n=await o.pages();if(await n[0].close(),await a.setViewport({width:1366,height:768}),PuppeteerBlocker.fromPrebuiltAdsAndTracking(fetch).then((e=>{e.enableBlockingInPage(a)})),await a.goto("chrome://settings/cookies"),webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:"[  Status -> **In Progress** ] | Getting temporary email"}),console.log("[  Status -> In Progress ] | Getting temporary email"),await a.goto("https://tempmailo.com/"),await a.waitForSelector("#i-email.vs-input"),await a.waitForTimeout(1e3),""==(e=await a.$eval("#i-email.vs-input",(e=>e.value))))try{webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:"[  Status -> **In Progress** ] | First temporary email provider is ratelimited; Attempting second temporary email provider"}),console.log("[  Status -> In Progress ] | First temporary email provider is ratelimited; Attempting second temporary email provider"),await a.waitForSelector('div.modal-header h3:contains("Rate limit exceeded! Try again later.")',{visible:!0,timeout:1e3})}catch{await a.goto("https://10minemail.com/"),await a.waitForSelector("#mail"),await a.waitForTimeout(1500),""==(e=await a.$eval("#mail",(e=>e.value)))&&(webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:"[ Status -> **FAILURE** ] | All temporary email providers are ratelimited, try using a vpn."}),console.log("[ Status -> FAILURE ] | All temporary email providers are ratelimited, try using a vpn."),await o.close())}await a.waitForTimeout(500),webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:`[  Status -> **In Progress** ] | Got temporary email ${e}`}),console.log(`[  Status -> In Progress ] | Got temporary email ${e}`);let r=await o.newPage();await r.goto("https://discord.com/register"),await r.waitForSelector('input[name="username"]',{timeout:1e4}),await r.waitForSelector('input[name="password"]',{timeout:1e4});let i=uniqueNamesGenerator({dictionaries:[adjectives,colors],length:2}),s=uniqueNamesGenerator({dictionaries:[adjectives],length:1})+Math.floor(5e3*Math.random())+1;await r.type('input[name="username"]',i+Math.floor(5e3*Math.random())+1),await r.type('input[name="global_name"]',s),await r.type('input[name="email"]',e);let c="gen"+Math.floor(1e6*Math.random())+"1";await r.type('input[name="password"]',c),webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:`[  Status -> **In Progress** ] | Filling in form with username ${i} and password ${c}`}),console.log(`[  Status -> In Progress ] | Filling in form with username ${i} and password ${c}`);try{await r.waitForSelector(".month-1Z2bRu"),await r.click(".month-1Z2bRu"),await r.click(".css-xszxaa-option"),await r.click(".day-1uOKpp"),await r.click(".css-8apu49-option"),await r.click(".year-3_SRuv");let e=await r.$("#react-select-4-option-20");await e.click();let t=await r.$$(".checkbox-1LuCGM.box-qwm0Q_");t[1]&&await t[1].click(),await r.click(".contents-3NembX"),await r.waitForTimeout(1e3),await r.waitForSelector(".content-1ijuZ8"),await r.$(".captchaContainer-30ckBV")}catch(e){throw webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:`[  Status -> **FAILURE** ] | ${e}`}),await r.waitForTimeout(500),Error(e)}webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:"[  Status -> **In Progress** ] | Solving hCaptcha (may take a while)"}),console.log("[  Status -> In Progress ] | Solving hCaptcha (may take a while)");let u=await r.waitForSelector('iframe[src^="https://newassets.hcaptcha.com"]'),w=await u.contentFrame();await r.waitForTimeout(1e3);let g=await w.waitForSelector("#checkbox");await g.click();let l=await r.waitForSelector('iframe[title="Main content of the hCaptcha challenge"]'),h=await l.contentFrame(),b=await h.waitForSelector(".info-off");await b.click();let d=await h.waitForSelector("#text_challenge");await d.click(),await h.waitForSelector("#prompt-text.text-text"),await r.waitForTimeout(1e3);let p=await h.$eval("#prompt-text.text-text",(e=>e.textContent));async function m(){let e=new ChatGPTAPI({accessToken:openAIAccessToken,apiReverseProxyUrl:"https://ai.fakeopen.com/api/conversation"});try{let t=await e.sendMessage(`${p} return a response with the word 'yes' or 'no' only`);if(401==t.response)throw webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:"[  Status -> **FAILURE** ] | The openAI access token provided was incorrect."}),await r.waitForTimeout(500),Error("The openAI access token provided was incorrect.");let o=t.text.toLowerCase().slice(0,-1);await h.waitForTimeout("#prompt-text.text-text"),await h.type(".input-field",o),await h.waitForSelector(".button-submit"),await h.click(".button-submit"),await h.waitForSelector("#prompt-text.text-text"),await r.waitForTimeout(1e3);let a=await h.$eval("#prompt-text.text-text",(e=>e.textContent));await r.waitForTimeout(1e3);let n=(await e.sendMessage(`${a} return a response with the word 'yes' or 'no' only`)).text.toLowerCase().slice(0,-1);await h.waitForTimeout("#prompt-text.text-text"),await h.type(".input-field",n),await h.waitForSelector(".button-submit"),await h.click(".button-submit"),await r.waitForTimeout(1e3);let i=await h.$eval("#prompt-text.text-text",(e=>e.textContent));await r.waitForTimeout(1e3);let s=(await e.sendMessage(`${i} return a response with the word 'yes' or 'no' only`)).text.toLowerCase().slice(0,-1);await h.waitForTimeout("#prompt-text.text-text"),await h.type(".input-field",s),await h.waitForSelector(".button-submit"),await h.click(".button-submit")}catch(e){throw webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:`[  Status -> **FAILURE** ] | ${e}`}),await r.waitForTimeout(500),Error(e)}}await r.waitForTimeout(1e3),await m(),webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:"[  Status -> **In Progress** ] | Checking bypass status"}),console.log("[  Status -> In Progress ] | Checking bypass status");try{await r.waitForSelector("button.closeButton-3nyHNb",{visible:!0,timeout:1e4})}catch{webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:"[  Status -> **In Progress** ] | Bypass failed, retrying (#1)..."}),console.log("[  Status -> In Progress ] | Bypass failed, retrying (#1)..."),await m()}try{await r.waitForSelector("button.closeButton-3nyHNb",{visible:!0,timeout:1e4})}catch{webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:"[  Status -> **In Progress** ] | Bypass failed, retrying (#2)..."}),console.log("[  Status -> In Progress ] | Bypass failed, retrying (#2)..."),await m()}webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:"[  Status -> **Success** ] | hCaptcha bypass success."}),console.log("[  Status -> Success ] | hCaptcha bypass success."),r.on("Network.webSocketFrameSent",(async({response:e})=>{try{let t=JSON.parse(e.payloadData).d.token;tokenwebhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:`[  Status -> **Success** ] | Acquired account token ${t}`}),console.log(`[  Status -> Success ] | Acquired account token ${t}`)}catch(e){throw webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:`[  Status -> **FAILURE** ] | ${e}`}),await r.waitForTimeout(500),Error(e)}}));let k=await o.newPage();await k.goto(discordServerURL),await k.waitForTimeout(1e3);let y=await k.$('button:contains("Accept Invite")'),S=await k.$('button:contains("Continue to Discord")');if(y)await y.click(),webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:"[  Status -> **Success** ] | Joined server."}),console.log("[  Status -> Success ] | Joined server."),webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:"[  Status -> **Finished** ] | Finished account generation. | hydrocxrbon on top"}),console.log("[  Status -> Finished ] | Finished account generation. | hydrocxrbon on top"),await k.waitForTimeout(500),await o.close();else if(S)throw webhook.send({username:"Account Generator Log by norb_ | dsc.gg/thegenhub",content:"[  Status -> **FAILURE** ] | Your server invite URL is not valid."}),await k.waitForTimeout(500),Error("Your server invite URL is not valid.")}startGenerator();
